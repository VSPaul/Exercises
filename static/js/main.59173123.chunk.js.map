{"version":3,"sources":["GenerateSimpson.js","DisplaySimpson.js","SampleSimpson.js","App.js","serviceWorker.js","index.js"],"names":["GenerateSimpson","selectSimpson","className","onClick","DisplaySimpson","simpson","src","image","alt","character","quote","sampleSimpson","App","props","state","fetch","then","response","json","data","setState","employee","results","console","log","this","getSimpson","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAYiBA,G,MAVQ,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACxB,OACI,yBAAMC,UAAU,mBACZ,4BAAQA,UAAU,MAAMC,QAASF,GAAjC,gBCUKG,EAbO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OACI,yBAAMH,UAAU,mBACZ,yBAAMI,IAAKD,EAAQE,MAAQC,IAAI,KAC/B,wBAAIN,UAAU,UACV,2CAAiBG,EAAQI,WACzB,uCAAaJ,EAAQK,UCFtBC,EANO,CAClBJ,MAAO,+FACPE,UAAW,gBACXC,MAAO,2FCiEIE,E,YAxDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAIXT,QAASM,GANM,E,2EAWF,IAAD,OAEdI,MAAM,oCACHC,MAAK,SAAAC,GAAQ,OAAMA,EAASC,UAC5BF,MAAK,SAAAG,GAEJ,EAAKC,SAAS,CACZC,SAAWF,EAAKG,QAAQ,U,mCAKpB,IAAD,OACXP,MAAM,yDACHC,MAAK,SAAAC,GAAQ,OAAMA,EAASC,UAC5BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZf,QAASc,EAAK,KAEhBI,QAAQC,IAAIL,Q,+BAMN,IAAD,OACP,OACA,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAGlB,kBAAC,EAAD,CAAiBG,QAAUoB,KAAKX,MAAMT,UAKtC,kBAAC,EAAD,CAAiBJ,cAAe,kBAAM,EAAKyB,sB,GAhD/BC,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.59173123.chunk.js","sourcesContent":["import  React  from  'react';\n\nconst  GenerateSimpson = ({ selectSimpson }) => {\n    return (\n        <div  className=\"GenerateSimpson\">\n            <button className='btn' onClick={selectSimpson}>New Quote</button>\n        </div>\n    );\n};\n\n\n\nexport  default  GenerateSimpson;\n","import  React  from  'react';\n\nconst  DisplaySimpson = ({ simpson }) => {\n    return (\n        <div  className=\"DisplaySimpsons\">\n            <img  src={simpson.image}  alt=\"\"  />\n            <ul className=\"bullet\">\n                <li>Character : {simpson.character}</li>\n                <li>Quote : {simpson.quote}</li>\n                \n            </ul>\n        </div>\n    );\n};\n\nexport  default  DisplaySimpson;\n","const sampleSimpson = {\n    image: 'https://cdn.glitch.com/3c3ffadc-3406-4440-bb95-d40ec8fcde72%2FHomerSimpson.png?1497567511939',\n    character: 'Homer Simpson',\n    quote: 'Facts are meaningless. You could use facts to prove anything that\\'s even remotely true.'\n};\n\nexport default sampleSimpson;","import React, {Component} from 'react';\n// import logo from './superman.png';\nimport './App.css';\nimport GenerateEmployee from './GenerateEmployee.js'\nimport DisplayEmployee from './DisplayEmployee.js'\nimport sampleEmployee from './SampleEmployee.js'\nimport GenerateSimpson from './GenerateSimpson';\nimport DisplaySimpson from './DisplaySimpson.js'\nimport sampleSimpson from './SampleSimpson.js'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // we can set up our sampleEmployee as the default\n      // to always display an employee\n      // employee:  sampleEmployee\n      simpson: sampleSimpson\n\n    };\n  }\n\n    getEmployee() {\n    // Employee collection via fetch\n    fetch(\"https://randomuser.me/api?nat=fr\")\n      .then(response  =>  response.json())\n      .then(data  => {\n        // Once the data is collected, we update our state with the new data\n        this.setState({\n          employee:  data.results[0],\n        });\n    });\n}\n\ngetSimpson() {\n  fetch(\"https://thesimpsonsquoteapi.glitch.me/quotes?count=10\")\n    .then(response  =>  response.json())\n    .then(data  => {\n      this.setState({\n        simpson: data[0],\n      });\n      console.log(data)\n  });\n}\n\n\n\n  render (){\n    return(\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n\n      <DisplaySimpson  simpson ={this.state.simpson}  />\n      {/* <DisplayEmployee  employee={this.state.employee}  /> */}\n      {/* <DisplayEmployee employee={sampleEmployee}/> */}\n\n      {/* <GenerateEmployee selectEmployee={() =>  this.getEmployee()}/> */}\n      <GenerateSimpson selectSimpson={() => this.getSimpson()}/>\n\n      </header>\n      \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}